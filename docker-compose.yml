version: '3.8'

services:
  backend:
    build: ./backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    environment:
      - PYTHONPATH=/app
      # AI_FALLBACK_MODE is auto-detected based on GPU availability
      # You can override it manually:
      # - AI_FALLBACK_MODE=true  # Force fallback mode (CPU only)
      # - AI_FALLBACK_MODE=false # Force real model (GPU only)
      - MISTRAL_API_URL=http://ai-service:80
      # AI_FALLBACK_MODE=false
    profiles:
      - gpu
      - cpu
      - default
    # No depends_on needed as both ai-service and ai-service-cpu 
    # use the same network alias and the client will retry connections

  # Real AI service with GPU support - named ai-service directly
  ai-service:
    image: ghcr.io/huggingface/text-generation-inference:1.1.0
    profiles: ["gpu"]
    ports:
      - "8080:80"
    volumes:
      - ai-model-data:/data
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    environment:
      - MODEL_ID=teknium/OpenHermes-2.5-Mistral-7B
      - QUANTIZE=bitsandbytes-nf4
      - MAX_INPUT_LENGTH=4096
      - MAX_TOTAL_TOKENS=8192
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      default:
        aliases:
          - ai-service

  # Mock AI service for CPU-only fallback
  ai-service-cpu:
    image: nginx:alpine
    profiles: ["cpu", "default"]
    ports:
      - "8080:80"
    volumes:
      - ./backend/app/services/ai/mock_service:/usr/share/nginx/html
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:80/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      default:
        aliases:
          - ai-service

volumes:
  ai-model-data:
