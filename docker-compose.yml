version: '3.8'

# This docker-compose.yml is designed to work in both GPU and non-GPU environments
# It includes two different service configurations for the AI service:
# 1. ai-service-gpu: Uses the real Mistral 7B model with GPU acceleration (requires NVIDIA GPU)
# 2. ai-service-cpu: Uses a mock service that provides fallback responses (works on any environment)
#
# The appropriate service is selected based on the COMPOSE_PROFILES environment variable:
# - For GPU environments: COMPOSE_PROFILES=gpu docker-compose up -d
# - For CPU environments: COMPOSE_PROFILES=cpu docker-compose up -d
# - If no profile is specified, it defaults to CPU mode

services:
  backend:
    build: ./backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    environment:
      - PYTHONPATH=/app
      # AI_FALLBACK_MODE is auto-detected based on GPU availability
      # You can override it by uncommenting one of the lines below
      # - AI_FALLBACK_MODE=true  # Force fallback mode (for CPU environments)
      # - AI_FALLBACK_MODE=false # Force real model (for GPU environments)
      - MISTRAL_API_URL=http://ai-service:80
    depends_on:
      - ai-service

  # Real AI service with GPU support (requires NVIDIA GPU)
  # This service is only started when using the 'gpu' profile
  ai-service-gpu:
    image: ghcr.io/huggingface/text-generation-inference:1.1.0
    profiles: ["gpu"]
    ports:
      - "8080:80"
    volumes:
      - ai-model-data:/data
    environment:
      - MODEL_ID=teknium/OpenHermes-2.5-Mistral-7B
      - QUANTIZE=q4_k_m
      - MAX_INPUT_LENGTH=4096
      - MAX_TOTAL_TOKENS=8192
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    # This service is aliased as 'ai-service' so the backend can connect to it
    networks:
      default:
        aliases:
          - ai-service

  # Mock AI service for CPU-only environments
  # This service is only started when using the 'cpu' profile or no profile
  ai-service-cpu:
    image: nginx:alpine
    profiles: ["cpu", "default"]
    ports:
      - "8080:80"
    volumes:
      - ./backend/app/services/ai/mock_service:/usr/share/nginx/html
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:80/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    # This service is aliased as 'ai-service' so the backend can connect to it
    networks:
      default:
        aliases:
          - ai-service

volumes:
  ai-model-data:
